"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const getPackageManager_1 = require("../utils/getPackageManager");
const workspace_1 = require("@schematics/angular/utility/workspace");
const package_1 = require("./../utils/package");
function addCapacitorToPackageJson() {
    return (host) => {
        (0, package_1.addPackageToPackageJson)(host, 'dependencies', '@capacitor/core', 'latest');
        (0, package_1.addPackageToPackageJson)(host, 'devDependencies', '@capacitor/cli', 'latest');
        return host;
    };
}
function capInit(projectName, npmTool, webDir) {
    return (host, context) => {
        const packageInstall = context.addTask(new tasks_1.NodePackageInstallTask());
        const command = npmTool === 'npm' ? 'npx' : 'yarn';
        context.addTask(new tasks_1.RunSchematicTask('cap-init', {
            command,
            args: ['cap', 'init', projectName, '--web-dir', webDir],
        }), [packageInstall]);
        return host;
    };
}
function ngAdd(options) {
    return async (host) => {
        const workspace = await (0, workspace_1.getWorkspace)(host);
        if (!options.project) {
            options.project = workspace.extensions.defaultProject;
        }
        console.log(workspace.projects.get);
        const project = workspace.projects.get(options.project);
        if (!project || project.extensions.projectType !== 'application') {
            throw new schematics_1.SchematicsException(`Capacitor Add requires a project type of "application".`);
        }
        const packageMgm = (0, getPackageManager_1.getPackageManager)(project.root);
        const distTarget = project.targets.get('build').options['outputPath'];
        return (0, schematics_1.chain)([
            addCapacitorToPackageJson(),
            capInit(options.project, packageMgm, distTarget),
        ]);
    };
}
exports.default = ngAdd;
