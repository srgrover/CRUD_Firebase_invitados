"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPackageManager = exports.supportsNpm = exports.supportsYarn = void 0;
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const path_1 = require("path");
var PackageManager;
(function (PackageManager) {
    PackageManager["Npm"] = "npm";
    PackageManager["Cnpm"] = "cnpm";
    PackageManager["Yarn"] = "yarn";
    PackageManager["Pnpm"] = "pnpm";
})(PackageManager || (PackageManager = {}));
function supports(name) {
    try {
        (0, child_process_1.execSync)(`${name} --version`, { stdio: 'ignore' });
        return true;
    }
    catch (_a) {
        return false;
    }
}
function supportsYarn() {
    return supports('yarn');
}
exports.supportsYarn = supportsYarn;
function supportsNpm() {
    return supports('npm');
}
exports.supportsNpm = supportsNpm;
function getPackageManager(root) {
    let packageManager = PackageManager.Npm;
    const hasYarn = supportsYarn();
    const hasYarnLock = (0, fs_1.existsSync)((0, path_1.join)(root, 'yarn.lock'));
    const hasNpm = supportsNpm();
    const hasNpmLock = (0, fs_1.existsSync)((0, path_1.join)(root, 'package-lock.json'));
    if (hasYarn && hasYarnLock && !hasNpmLock) {
        packageManager = PackageManager.Yarn;
    }
    else if (hasNpm && hasNpmLock && !hasYarnLock) {
        packageManager = PackageManager.Npm;
    }
    else if (hasYarn && !hasNpm) {
        packageManager = PackageManager.Yarn;
    }
    else if (hasNpm && !hasYarn) {
        packageManager = PackageManager.Npm;
    }
    return packageManager;
}
exports.getPackageManager = getPackageManager;
