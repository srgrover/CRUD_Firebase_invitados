{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/romerosp/source/repos/Angular/CRUD_Firebase_invitados/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { _registerComponent, registerVersion, getApp, _getProvider } from '@firebase/app';\nimport { FirebaseError, getModularInstance } from '@firebase/util';\nimport { Component } from '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\nconst UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\n\nfunction mapValues( // { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\no, f) {\n  const result = {};\n\n  for (const key in o) {\n    if (o.hasOwnProperty(key)) {\n      result[key] = f(o[key]);\n    }\n  }\n\n  return result;\n}\n/**\r\n * Takes data and encodes it in a JSON-friendly way, such that types such as\r\n * Date are preserved.\r\n * @internal\r\n * @param data - Data to encode.\r\n */\n\n\nfunction encode(data) {\n  if (data == null) {\n    return null;\n  }\n\n  if (data instanceof Number) {\n    data = data.valueOf();\n  }\n\n  if (typeof data === 'number' && isFinite(data)) {\n    // Any number in JS is safe to put directly in JSON and parse as a double\n    // without any loss of precision.\n    return data;\n  }\n\n  if (data === true || data === false) {\n    return data;\n  }\n\n  if (Object.prototype.toString.call(data) === '[object String]') {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    return data.toISOString();\n  }\n\n  if (Array.isArray(data)) {\n    return data.map(x => encode(x));\n  }\n\n  if (typeof data === 'function' || typeof data === 'object') {\n    return mapValues(data, x => encode(x));\n  } // If we got this far, the data is not encodable.\n\n\n  throw new Error('Data cannot be encoded in JSON: ' + data);\n}\n/**\r\n * Takes data that's been encoded in a JSON-friendly form and returns a form\r\n * with richer datatypes, such as Dates, etc.\r\n * @internal\r\n * @param json - JSON to convert.\r\n */\n\n\nfunction decode(json) {\n  if (json == null) {\n    return json;\n  }\n\n  if (json['@type']) {\n    switch (json['@type']) {\n      case LONG_TYPE: // Fall through and handle this the same as unsigned.\n\n      case UNSIGNED_LONG_TYPE:\n        {\n          // Technically, this could work return a valid number for malformed\n          // data if there was a number followed by garbage. But it's just not\n          // worth all the extra code to detect that case.\n          const value = Number(json['value']);\n\n          if (isNaN(value)) {\n            throw new Error('Data cannot be decoded from JSON: ' + json);\n          }\n\n          return value;\n        }\n\n      default:\n        {\n          throw new Error('Data cannot be decoded from JSON: ' + json);\n        }\n    }\n  }\n\n  if (Array.isArray(json)) {\n    return json.map(x => decode(x));\n  }\n\n  if (typeof json === 'function' || typeof json === 'object') {\n    return mapValues(json, x => decode(x));\n  } // Anything else is safe to return.\n\n\n  return json;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Type constant for Firebase Functions.\r\n */\n\n\nconst FUNCTIONS_TYPE = 'functions';\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Standard error codes for different ways a request can fail, as defined by:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * This map is used primarily to convert from a backend error code string to\r\n * a client SDK error code string, and make sure it's in the supported set.\r\n */\n\nconst errorCodeMap = {\n  OK: 'ok',\n  CANCELLED: 'cancelled',\n  UNKNOWN: 'unknown',\n  INVALID_ARGUMENT: 'invalid-argument',\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n  NOT_FOUND: 'not-found',\n  ALREADY_EXISTS: 'already-exists',\n  PERMISSION_DENIED: 'permission-denied',\n  UNAUTHENTICATED: 'unauthenticated',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  FAILED_PRECONDITION: 'failed-precondition',\n  ABORTED: 'aborted',\n  OUT_OF_RANGE: 'out-of-range',\n  UNIMPLEMENTED: 'unimplemented',\n  INTERNAL: 'internal',\n  UNAVAILABLE: 'unavailable',\n  DATA_LOSS: 'data-loss'\n};\n/**\r\n * An explicit error that can be thrown from a handler to send an error to the\r\n * client that called the function.\r\n */\n\nclass FunctionsError extends FirebaseError {\n  constructor(\n  /**\r\n   * A standard error code that will be returned to the client. This also\r\n   * determines the HTTP status code of the response, as defined in code.proto.\r\n   */\n  code, message,\n  /**\r\n   * Extra data to be converted to JSON and included in the error response.\r\n   */\n  details) {\n    super(`${FUNCTIONS_TYPE}/${code}`, message || '');\n    this.details = details;\n  }\n\n}\n/**\r\n * Takes an HTTP status code and returns the corresponding ErrorCode.\r\n * This is the standard HTTP status code -> error mapping defined in:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * @param status An HTTP status code.\r\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\r\n */\n\n\nfunction codeForHTTPStatus(status) {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n\n  switch (status) {\n    case 0:\n      // This can happen if the server returns 500.\n      return 'internal';\n\n    case 400:\n      return 'invalid-argument';\n\n    case 401:\n      return 'unauthenticated';\n\n    case 403:\n      return 'permission-denied';\n\n    case 404:\n      return 'not-found';\n\n    case 409:\n      return 'aborted';\n\n    case 429:\n      return 'resource-exhausted';\n\n    case 499:\n      return 'cancelled';\n\n    case 500:\n      return 'internal';\n\n    case 501:\n      return 'unimplemented';\n\n    case 503:\n      return 'unavailable';\n\n    case 504:\n      return 'deadline-exceeded';\n  }\n\n  return 'unknown';\n}\n/**\r\n * Takes an HTTP response and returns the corresponding Error, if any.\r\n */\n\n\nfunction _errorForResponse(status, bodyJSON) {\n  let code = codeForHTTPStatus(status); // Start with reasonable defaults from the status code.\n\n  let description = code;\n  let details = undefined; // Then look through the body for explicit details.\n\n  try {\n    const errorJSON = bodyJSON && bodyJSON.error;\n\n    if (errorJSON) {\n      const status = errorJSON.status;\n\n      if (typeof status === 'string') {\n        if (!errorCodeMap[status]) {\n          // They must've included an unknown error code in the body.\n          return new FunctionsError('internal', 'internal');\n        }\n\n        code = errorCodeMap[status]; // TODO(klimt): Add better default descriptions for error enums.\n        // The default description needs to be updated for the new code.\n\n        description = status;\n      }\n\n      const message = errorJSON.message;\n\n      if (typeof message === 'string') {\n        description = message;\n      }\n\n      details = errorJSON.details;\n\n      if (details !== undefined) {\n        details = decode(details);\n      }\n    }\n  } catch (e) {// If we couldn't parse explicit error data, that's fine.\n  }\n\n  if (code === 'ok') {\n    // Technically, there's an edge case where a developer could explicitly\n    // return an error code of OK, and we will treat it as success, but that\n    // seems reasonable.\n    return null;\n  }\n\n  return new FunctionsError(code, description, details);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Helper class to get metadata that should be included with a function call.\r\n * @internal\r\n */\n\n\nclass ContextProvider {\n  constructor(authProvider, messagingProvider, appCheckProvider) {\n    this.auth = null;\n    this.messaging = null;\n    this.appCheck = null;\n    this.auth = authProvider.getImmediate({\n      optional: true\n    });\n    this.messaging = messagingProvider.getImmediate({\n      optional: true\n    });\n\n    if (!this.auth) {\n      authProvider.get().then(auth => this.auth = auth, () => {\n        /* get() never rejects */\n      });\n    }\n\n    if (!this.messaging) {\n      messagingProvider.get().then(messaging => this.messaging = messaging, () => {\n        /* get() never rejects */\n      });\n    }\n\n    if (!this.appCheck) {\n      appCheckProvider.get().then(appCheck => this.appCheck = appCheck, () => {\n        /* get() never rejects */\n      });\n    }\n  }\n\n  getAuthToken() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this.auth) {\n        return undefined;\n      }\n\n      try {\n        const token = yield _this.auth.getToken();\n        return token === null || token === void 0 ? void 0 : token.accessToken;\n      } catch (e) {\n        // If there's any error when trying to get the auth token, leave it off.\n        return undefined;\n      }\n    })();\n  }\n\n  getMessagingToken() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this2.messaging || !('Notification' in self) || Notification.permission !== 'granted') {\n        return undefined;\n      }\n\n      try {\n        return yield _this2.messaging.getToken();\n      } catch (e) {\n        // We don't warn on this, because it usually means messaging isn't set up.\n        // console.warn('Failed to retrieve instance id token.', e);\n        // If there's any error when trying to get the token, leave it off.\n        return undefined;\n      }\n    })();\n  }\n\n  getAppCheckToken() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this3.appCheck) {\n        const result = yield _this3.appCheck.getToken();\n\n        if (result.error) {\n          // Do not send the App Check header to the functions endpoint if\n          // there was an error from the App Check exchange endpoint. The App\n          // Check SDK will already have logged the error to console.\n          return null;\n        }\n\n        return result.token;\n      }\n\n      return null;\n    })();\n  }\n\n  getContext() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const authToken = yield _this4.getAuthToken();\n      const messagingToken = yield _this4.getMessagingToken();\n      const appCheckToken = yield _this4.getAppCheckToken();\n      return {\n        authToken,\n        messagingToken,\n        appCheckToken\n      };\n    })();\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst DEFAULT_REGION = 'us-central1';\n/**\r\n * Returns a Promise that will be rejected after the given duration.\r\n * The error will be of type FunctionsError.\r\n *\r\n * @param millis Number of milliseconds to wait before rejecting.\r\n */\n\nfunction failAfter(millis) {\n  return new Promise((_, reject) => {\n    setTimeout(() => {\n      reject(new FunctionsError('deadline-exceeded', 'deadline-exceeded'));\n    }, millis);\n  });\n}\n/**\r\n * The main class for the Firebase Functions SDK.\r\n * @internal\r\n */\n\n\nclass FunctionsService {\n  /**\r\n   * Creates a new Functions service for the given app.\r\n   * @param app - The FirebaseApp to use.\r\n   */\n  constructor(app, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain = DEFAULT_REGION, fetchImpl) {\n    this.app = app;\n    this.fetchImpl = fetchImpl;\n    this.emulatorOrigin = null;\n    this.contextProvider = new ContextProvider(authProvider, messagingProvider, appCheckProvider); // Cancels all ongoing requests when resolved.\n\n    this.cancelAllRequests = new Promise(resolve => {\n      this.deleteService = () => {\n        return Promise.resolve(resolve());\n      };\n    }); // Resolve the region or custom domain overload by attempting to parse it.\n\n    try {\n      const url = new URL(regionOrCustomDomain);\n      this.customDomain = url.origin;\n      this.region = DEFAULT_REGION;\n    } catch (e) {\n      this.customDomain = null;\n      this.region = regionOrCustomDomain;\n    }\n  }\n\n  _delete() {\n    return this.deleteService();\n  }\n  /**\r\n   * Returns the URL for a callable with the given name.\r\n   * @param name - The name of the callable.\r\n   * @internal\r\n   */\n\n\n  _url(name) {\n    const projectId = this.app.options.projectId;\n\n    if (this.emulatorOrigin !== null) {\n      const origin = this.emulatorOrigin;\n      return `${origin}/${projectId}/${this.region}/${name}`;\n    }\n\n    if (this.customDomain !== null) {\n      return `${this.customDomain}/${name}`;\n    }\n\n    return `https://${this.region}-${projectId}.cloudfunctions.net/${name}`;\n  }\n\n}\n/**\r\n * Modify this instance to communicate with the Cloud Functions emulator.\r\n *\r\n * Note: this must be called before this instance has been used to do any operations.\r\n *\r\n * @param host The emulator host (ex: localhost)\r\n * @param port The emulator port (ex: 5001)\r\n * @public\r\n */\n\n\nfunction connectFunctionsEmulator$1(functionsInstance, host, port) {\n  functionsInstance.emulatorOrigin = `http://${host}:${port}`;\n}\n/**\r\n * Returns a reference to the callable https trigger with the given name.\r\n * @param name - The name of the trigger.\r\n * @public\r\n */\n\n\nfunction httpsCallable$1(functionsInstance, name, options) {\n  return data => {\n    return call(functionsInstance, name, data, options || {});\n  };\n}\n/**\r\n * Does an HTTP POST and returns the completed response.\r\n * @param url The url to post to.\r\n * @param body The JSON body of the post.\r\n * @param headers The HTTP headers to include in the request.\r\n * @return A Promise that will succeed when the request finishes.\r\n */\n\n\nfunction postJSON(_x, _x2, _x3, _x4) {\n  return _postJSON.apply(this, arguments);\n}\n/**\r\n * Calls a callable function asynchronously and returns the result.\r\n * @param name The name of the callable trigger.\r\n * @param data The data to pass as params to the function.s\r\n */\n\n\nfunction _postJSON() {\n  _postJSON = _asyncToGenerator(function* (url, body, headers, fetchImpl) {\n    headers['Content-Type'] = 'application/json';\n    let response;\n\n    try {\n      response = yield fetchImpl(url, {\n        method: 'POST',\n        body: JSON.stringify(body),\n        headers\n      });\n    } catch (e) {\n      // This could be an unhandled error on the backend, or it could be a\n      // network error. There's no way to know, since an unhandled error on the\n      // backend will fail to set the proper CORS header, and thus will be\n      // treated as a network error by fetch.\n      return {\n        status: 0,\n        json: null\n      };\n    }\n\n    let json = null;\n\n    try {\n      json = yield response.json();\n    } catch (e) {// If we fail to parse JSON, it will fail the same as an empty body.\n    }\n\n    return {\n      status: response.status,\n      json\n    };\n  });\n  return _postJSON.apply(this, arguments);\n}\n\nfunction call(_x5, _x6, _x7, _x8) {\n  return _call.apply(this, arguments);\n}\n\nfunction _call() {\n  _call = _asyncToGenerator(function* (functionsInstance, name, data, options) {\n    const url = functionsInstance._url(name); // Encode any special types, such as dates, in the input data.\n\n\n    data = encode(data);\n    const body = {\n      data\n    }; // Add a header for the authToken.\n\n    const headers = {};\n    const context = yield functionsInstance.contextProvider.getContext();\n\n    if (context.authToken) {\n      headers['Authorization'] = 'Bearer ' + context.authToken;\n    }\n\n    if (context.messagingToken) {\n      headers['Firebase-Instance-ID-Token'] = context.messagingToken;\n    }\n\n    if (context.appCheckToken !== null) {\n      headers['X-Firebase-AppCheck'] = context.appCheckToken;\n    } // Default timeout to 70s, but let the options override it.\n\n\n    const timeout = options.timeout || 70000;\n    const response = yield Promise.race([postJSON(url, body, headers, functionsInstance.fetchImpl), failAfter(timeout), functionsInstance.cancelAllRequests]); // If service was deleted, interrupted response throws an error.\n\n    if (!response) {\n      throw new FunctionsError('cancelled', 'Firebase Functions instance was deleted.');\n    } // Check for an error status, regardless of http status.\n\n\n    const error = _errorForResponse(response.status, response.json);\n\n    if (error) {\n      throw error;\n    }\n\n    if (!response.json) {\n      throw new FunctionsError('internal', 'Response is not valid JSON object.');\n    }\n\n    let responseData = response.json.data; // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\n    // backwards compatibility.\n\n    if (typeof responseData === 'undefined') {\n      responseData = response.json.result;\n    }\n\n    if (typeof responseData === 'undefined') {\n      // Consider the response malformed.\n      throw new FunctionsError('internal', 'Response is missing data field.');\n    } // Decode any special types, such as dates, in the returned data.\n\n\n    const decodedData = decode(responseData);\n    return {\n      data: decodedData\n    };\n  });\n  return _call.apply(this, arguments);\n}\n\nconst name = \"@firebase/functions\";\nconst version = \"0.7.3\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst AUTH_INTERNAL_NAME = 'auth-internal';\nconst APP_CHECK_INTERNAL_NAME = 'app-check-internal';\nconst MESSAGING_INTERNAL_NAME = 'messaging-internal';\n\nfunction registerFunctions(fetchImpl, variant) {\n  const factory = (container, {\n    instanceIdentifier: regionOrCustomDomain\n  }) => {\n    // Dependencies\n    const app = container.getProvider('app').getImmediate();\n    const authProvider = container.getProvider(AUTH_INTERNAL_NAME);\n    const messagingProvider = container.getProvider(MESSAGING_INTERNAL_NAME);\n    const appCheckProvider = container.getProvider(APP_CHECK_INTERNAL_NAME); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    return new FunctionsService(app, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain, fetchImpl);\n  };\n\n  _registerComponent(new Component(FUNCTIONS_TYPE, factory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setMultipleInstances(true));\n\n  registerVersion(name, version, variant); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name, version, 'esm2017');\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a {@link Functions} instance for the given app.\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n * @param regionOrCustomDomain - one of:\r\n *   a) The region the callable functions are located in (ex: us-central1)\r\n *   b) A custom domain hosting the callable functions (ex: https://mydomain.com)\r\n * @public\r\n */\n\n\nfunction getFunctions(app = getApp(), regionOrCustomDomain = DEFAULT_REGION) {\n  // Dependencies\n  const functionsProvider = _getProvider(getModularInstance(app), FUNCTIONS_TYPE);\n\n  const functionsInstance = functionsProvider.getImmediate({\n    identifier: regionOrCustomDomain\n  });\n  return functionsInstance;\n}\n/**\r\n * Modify this instance to communicate with the Cloud Functions emulator.\r\n *\r\n * Note: this must be called before this instance has been used to do any operations.\r\n *\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @public\r\n */\n\n\nfunction connectFunctionsEmulator(functionsInstance, host, port) {\n  connectFunctionsEmulator$1(getModularInstance(functionsInstance), host, port);\n}\n/**\r\n * Returns a reference to the callable HTTPS trigger with the given name.\r\n * @param name - The name of the trigger.\r\n * @public\r\n */\n\n\nfunction httpsCallable(functionsInstance, name, options) {\n  return httpsCallable$1(getModularInstance(functionsInstance), name, options);\n}\n/**\r\n * Cloud Functions for Firebase\r\n *\r\n * @packageDocumentation\r\n */\n\n\nregisterFunctions(fetch.bind(self));\nexport { connectFunctionsEmulator, getFunctions, httpsCallable };","map":{"version":3,"sources":["C:/Users/romerosp/source/repos/Angular/CRUD_Firebase_invitados/node_modules/@firebase/functions/dist/index.esm2017.js"],"names":["_registerComponent","registerVersion","getApp","_getProvider","FirebaseError","getModularInstance","Component","LONG_TYPE","UNSIGNED_LONG_TYPE","mapValues","o","f","result","key","hasOwnProperty","encode","data","Number","valueOf","isFinite","Object","prototype","toString","call","Date","toISOString","Array","isArray","map","x","Error","decode","json","value","isNaN","FUNCTIONS_TYPE","errorCodeMap","OK","CANCELLED","UNKNOWN","INVALID_ARGUMENT","DEADLINE_EXCEEDED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","UNAUTHENTICATED","RESOURCE_EXHAUSTED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","UNIMPLEMENTED","INTERNAL","UNAVAILABLE","DATA_LOSS","FunctionsError","constructor","code","message","details","codeForHTTPStatus","status","_errorForResponse","bodyJSON","description","undefined","errorJSON","error","e","ContextProvider","authProvider","messagingProvider","appCheckProvider","auth","messaging","appCheck","getImmediate","optional","get","then","getAuthToken","token","getToken","accessToken","getMessagingToken","self","Notification","permission","getAppCheckToken","getContext","authToken","messagingToken","appCheckToken","DEFAULT_REGION","failAfter","millis","Promise","_","reject","setTimeout","FunctionsService","app","regionOrCustomDomain","fetchImpl","emulatorOrigin","contextProvider","cancelAllRequests","resolve","deleteService","url","URL","customDomain","origin","region","_delete","_url","name","projectId","options","connectFunctionsEmulator$1","functionsInstance","host","port","httpsCallable$1","postJSON","body","headers","response","method","JSON","stringify","context","timeout","race","responseData","decodedData","version","AUTH_INTERNAL_NAME","APP_CHECK_INTERNAL_NAME","MESSAGING_INTERNAL_NAME","registerFunctions","variant","factory","container","instanceIdentifier","getProvider","setMultipleInstances","getFunctions","functionsProvider","identifier","connectFunctionsEmulator","httpsCallable","fetch","bind"],"mappings":"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","sourcesContent":["import { _registerComponent, registerVersion, getApp, _getProvider } from '@firebase/app';\nimport { FirebaseError, getModularInstance } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\r\nconst UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\r\nfunction mapValues(\r\n// { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\no, f) {\r\n    const result = {};\r\n    for (const key in o) {\r\n        if (o.hasOwnProperty(key)) {\r\n            result[key] = f(o[key]);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Takes data and encodes it in a JSON-friendly way, such that types such as\r\n * Date are preserved.\r\n * @internal\r\n * @param data - Data to encode.\r\n */\r\nfunction encode(data) {\r\n    if (data == null) {\r\n        return null;\r\n    }\r\n    if (data instanceof Number) {\r\n        data = data.valueOf();\r\n    }\r\n    if (typeof data === 'number' && isFinite(data)) {\r\n        // Any number in JS is safe to put directly in JSON and parse as a double\r\n        // without any loss of precision.\r\n        return data;\r\n    }\r\n    if (data === true || data === false) {\r\n        return data;\r\n    }\r\n    if (Object.prototype.toString.call(data) === '[object String]') {\r\n        return data;\r\n    }\r\n    if (data instanceof Date) {\r\n        return data.toISOString();\r\n    }\r\n    if (Array.isArray(data)) {\r\n        return data.map(x => encode(x));\r\n    }\r\n    if (typeof data === 'function' || typeof data === 'object') {\r\n        return mapValues(data, x => encode(x));\r\n    }\r\n    // If we got this far, the data is not encodable.\r\n    throw new Error('Data cannot be encoded in JSON: ' + data);\r\n}\r\n/**\r\n * Takes data that's been encoded in a JSON-friendly form and returns a form\r\n * with richer datatypes, such as Dates, etc.\r\n * @internal\r\n * @param json - JSON to convert.\r\n */\r\nfunction decode(json) {\r\n    if (json == null) {\r\n        return json;\r\n    }\r\n    if (json['@type']) {\r\n        switch (json['@type']) {\r\n            case LONG_TYPE:\r\n            // Fall through and handle this the same as unsigned.\r\n            case UNSIGNED_LONG_TYPE: {\r\n                // Technically, this could work return a valid number for malformed\r\n                // data if there was a number followed by garbage. But it's just not\r\n                // worth all the extra code to detect that case.\r\n                const value = Number(json['value']);\r\n                if (isNaN(value)) {\r\n                    throw new Error('Data cannot be decoded from JSON: ' + json);\r\n                }\r\n                return value;\r\n            }\r\n            default: {\r\n                throw new Error('Data cannot be decoded from JSON: ' + json);\r\n            }\r\n        }\r\n    }\r\n    if (Array.isArray(json)) {\r\n        return json.map(x => decode(x));\r\n    }\r\n    if (typeof json === 'function' || typeof json === 'object') {\r\n        return mapValues(json, x => decode(x));\r\n    }\r\n    // Anything else is safe to return.\r\n    return json;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Functions.\r\n */\r\nconst FUNCTIONS_TYPE = 'functions';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Standard error codes for different ways a request can fail, as defined by:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * This map is used primarily to convert from a backend error code string to\r\n * a client SDK error code string, and make sure it's in the supported set.\r\n */\r\nconst errorCodeMap = {\r\n    OK: 'ok',\r\n    CANCELLED: 'cancelled',\r\n    UNKNOWN: 'unknown',\r\n    INVALID_ARGUMENT: 'invalid-argument',\r\n    DEADLINE_EXCEEDED: 'deadline-exceeded',\r\n    NOT_FOUND: 'not-found',\r\n    ALREADY_EXISTS: 'already-exists',\r\n    PERMISSION_DENIED: 'permission-denied',\r\n    UNAUTHENTICATED: 'unauthenticated',\r\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\r\n    FAILED_PRECONDITION: 'failed-precondition',\r\n    ABORTED: 'aborted',\r\n    OUT_OF_RANGE: 'out-of-range',\r\n    UNIMPLEMENTED: 'unimplemented',\r\n    INTERNAL: 'internal',\r\n    UNAVAILABLE: 'unavailable',\r\n    DATA_LOSS: 'data-loss'\r\n};\r\n/**\r\n * An explicit error that can be thrown from a handler to send an error to the\r\n * client that called the function.\r\n */\r\nclass FunctionsError extends FirebaseError {\r\n    constructor(\r\n    /**\r\n     * A standard error code that will be returned to the client. This also\r\n     * determines the HTTP status code of the response, as defined in code.proto.\r\n     */\r\n    code, message, \r\n    /**\r\n     * Extra data to be converted to JSON and included in the error response.\r\n     */\r\n    details) {\r\n        super(`${FUNCTIONS_TYPE}/${code}`, message || '');\r\n        this.details = details;\r\n    }\r\n}\r\n/**\r\n * Takes an HTTP status code and returns the corresponding ErrorCode.\r\n * This is the standard HTTP status code -> error mapping defined in:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * @param status An HTTP status code.\r\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\r\n */\r\nfunction codeForHTTPStatus(status) {\r\n    // Make sure any successful status is OK.\r\n    if (status >= 200 && status < 300) {\r\n        return 'ok';\r\n    }\r\n    switch (status) {\r\n        case 0:\r\n            // This can happen if the server returns 500.\r\n            return 'internal';\r\n        case 400:\r\n            return 'invalid-argument';\r\n        case 401:\r\n            return 'unauthenticated';\r\n        case 403:\r\n            return 'permission-denied';\r\n        case 404:\r\n            return 'not-found';\r\n        case 409:\r\n            return 'aborted';\r\n        case 429:\r\n            return 'resource-exhausted';\r\n        case 499:\r\n            return 'cancelled';\r\n        case 500:\r\n            return 'internal';\r\n        case 501:\r\n            return 'unimplemented';\r\n        case 503:\r\n            return 'unavailable';\r\n        case 504:\r\n            return 'deadline-exceeded';\r\n    }\r\n    return 'unknown';\r\n}\r\n/**\r\n * Takes an HTTP response and returns the corresponding Error, if any.\r\n */\r\nfunction _errorForResponse(status, bodyJSON) {\r\n    let code = codeForHTTPStatus(status);\r\n    // Start with reasonable defaults from the status code.\r\n    let description = code;\r\n    let details = undefined;\r\n    // Then look through the body for explicit details.\r\n    try {\r\n        const errorJSON = bodyJSON && bodyJSON.error;\r\n        if (errorJSON) {\r\n            const status = errorJSON.status;\r\n            if (typeof status === 'string') {\r\n                if (!errorCodeMap[status]) {\r\n                    // They must've included an unknown error code in the body.\r\n                    return new FunctionsError('internal', 'internal');\r\n                }\r\n                code = errorCodeMap[status];\r\n                // TODO(klimt): Add better default descriptions for error enums.\r\n                // The default description needs to be updated for the new code.\r\n                description = status;\r\n            }\r\n            const message = errorJSON.message;\r\n            if (typeof message === 'string') {\r\n                description = message;\r\n            }\r\n            details = errorJSON.details;\r\n            if (details !== undefined) {\r\n                details = decode(details);\r\n            }\r\n        }\r\n    }\r\n    catch (e) {\r\n        // If we couldn't parse explicit error data, that's fine.\r\n    }\r\n    if (code === 'ok') {\r\n        // Technically, there's an edge case where a developer could explicitly\r\n        // return an error code of OK, and we will treat it as success, but that\r\n        // seems reasonable.\r\n        return null;\r\n    }\r\n    return new FunctionsError(code, description, details);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper class to get metadata that should be included with a function call.\r\n * @internal\r\n */\r\nclass ContextProvider {\r\n    constructor(authProvider, messagingProvider, appCheckProvider) {\r\n        this.auth = null;\r\n        this.messaging = null;\r\n        this.appCheck = null;\r\n        this.auth = authProvider.getImmediate({ optional: true });\r\n        this.messaging = messagingProvider.getImmediate({\r\n            optional: true\r\n        });\r\n        if (!this.auth) {\r\n            authProvider.get().then(auth => (this.auth = auth), () => {\r\n                /* get() never rejects */\r\n            });\r\n        }\r\n        if (!this.messaging) {\r\n            messagingProvider.get().then(messaging => (this.messaging = messaging), () => {\r\n                /* get() never rejects */\r\n            });\r\n        }\r\n        if (!this.appCheck) {\r\n            appCheckProvider.get().then(appCheck => (this.appCheck = appCheck), () => {\r\n                /* get() never rejects */\r\n            });\r\n        }\r\n    }\r\n    async getAuthToken() {\r\n        if (!this.auth) {\r\n            return undefined;\r\n        }\r\n        try {\r\n            const token = await this.auth.getToken();\r\n            return token === null || token === void 0 ? void 0 : token.accessToken;\r\n        }\r\n        catch (e) {\r\n            // If there's any error when trying to get the auth token, leave it off.\r\n            return undefined;\r\n        }\r\n    }\r\n    async getMessagingToken() {\r\n        if (!this.messaging ||\r\n            !('Notification' in self) ||\r\n            Notification.permission !== 'granted') {\r\n            return undefined;\r\n        }\r\n        try {\r\n            return await this.messaging.getToken();\r\n        }\r\n        catch (e) {\r\n            // We don't warn on this, because it usually means messaging isn't set up.\r\n            // console.warn('Failed to retrieve instance id token.', e);\r\n            // If there's any error when trying to get the token, leave it off.\r\n            return undefined;\r\n        }\r\n    }\r\n    async getAppCheckToken() {\r\n        if (this.appCheck) {\r\n            const result = await this.appCheck.getToken();\r\n            if (result.error) {\r\n                // Do not send the App Check header to the functions endpoint if\r\n                // there was an error from the App Check exchange endpoint. The App\r\n                // Check SDK will already have logged the error to console.\r\n                return null;\r\n            }\r\n            return result.token;\r\n        }\r\n        return null;\r\n    }\r\n    async getContext() {\r\n        const authToken = await this.getAuthToken();\r\n        const messagingToken = await this.getMessagingToken();\r\n        const appCheckToken = await this.getAppCheckToken();\r\n        return { authToken, messagingToken, appCheckToken };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_REGION = 'us-central1';\r\n/**\r\n * Returns a Promise that will be rejected after the given duration.\r\n * The error will be of type FunctionsError.\r\n *\r\n * @param millis Number of milliseconds to wait before rejecting.\r\n */\r\nfunction failAfter(millis) {\r\n    return new Promise((_, reject) => {\r\n        setTimeout(() => {\r\n            reject(new FunctionsError('deadline-exceeded', 'deadline-exceeded'));\r\n        }, millis);\r\n    });\r\n}\r\n/**\r\n * The main class for the Firebase Functions SDK.\r\n * @internal\r\n */\r\nclass FunctionsService {\r\n    /**\r\n     * Creates a new Functions service for the given app.\r\n     * @param app - The FirebaseApp to use.\r\n     */\r\n    constructor(app, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain = DEFAULT_REGION, fetchImpl) {\r\n        this.app = app;\r\n        this.fetchImpl = fetchImpl;\r\n        this.emulatorOrigin = null;\r\n        this.contextProvider = new ContextProvider(authProvider, messagingProvider, appCheckProvider);\r\n        // Cancels all ongoing requests when resolved.\r\n        this.cancelAllRequests = new Promise(resolve => {\r\n            this.deleteService = () => {\r\n                return Promise.resolve(resolve());\r\n            };\r\n        });\r\n        // Resolve the region or custom domain overload by attempting to parse it.\r\n        try {\r\n            const url = new URL(regionOrCustomDomain);\r\n            this.customDomain = url.origin;\r\n            this.region = DEFAULT_REGION;\r\n        }\r\n        catch (e) {\r\n            this.customDomain = null;\r\n            this.region = regionOrCustomDomain;\r\n        }\r\n    }\r\n    _delete() {\r\n        return this.deleteService();\r\n    }\r\n    /**\r\n     * Returns the URL for a callable with the given name.\r\n     * @param name - The name of the callable.\r\n     * @internal\r\n     */\r\n    _url(name) {\r\n        const projectId = this.app.options.projectId;\r\n        if (this.emulatorOrigin !== null) {\r\n            const origin = this.emulatorOrigin;\r\n            return `${origin}/${projectId}/${this.region}/${name}`;\r\n        }\r\n        if (this.customDomain !== null) {\r\n            return `${this.customDomain}/${name}`;\r\n        }\r\n        return `https://${this.region}-${projectId}.cloudfunctions.net/${name}`;\r\n    }\r\n}\r\n/**\r\n * Modify this instance to communicate with the Cloud Functions emulator.\r\n *\r\n * Note: this must be called before this instance has been used to do any operations.\r\n *\r\n * @param host The emulator host (ex: localhost)\r\n * @param port The emulator port (ex: 5001)\r\n * @public\r\n */\r\nfunction connectFunctionsEmulator$1(functionsInstance, host, port) {\r\n    functionsInstance.emulatorOrigin = `http://${host}:${port}`;\r\n}\r\n/**\r\n * Returns a reference to the callable https trigger with the given name.\r\n * @param name - The name of the trigger.\r\n * @public\r\n */\r\nfunction httpsCallable$1(functionsInstance, name, options) {\r\n    return (data => {\r\n        return call(functionsInstance, name, data, options || {});\r\n    });\r\n}\r\n/**\r\n * Does an HTTP POST and returns the completed response.\r\n * @param url The url to post to.\r\n * @param body The JSON body of the post.\r\n * @param headers The HTTP headers to include in the request.\r\n * @return A Promise that will succeed when the request finishes.\r\n */\r\nasync function postJSON(url, body, headers, fetchImpl) {\r\n    headers['Content-Type'] = 'application/json';\r\n    let response;\r\n    try {\r\n        response = await fetchImpl(url, {\r\n            method: 'POST',\r\n            body: JSON.stringify(body),\r\n            headers\r\n        });\r\n    }\r\n    catch (e) {\r\n        // This could be an unhandled error on the backend, or it could be a\r\n        // network error. There's no way to know, since an unhandled error on the\r\n        // backend will fail to set the proper CORS header, and thus will be\r\n        // treated as a network error by fetch.\r\n        return {\r\n            status: 0,\r\n            json: null\r\n        };\r\n    }\r\n    let json = null;\r\n    try {\r\n        json = await response.json();\r\n    }\r\n    catch (e) {\r\n        // If we fail to parse JSON, it will fail the same as an empty body.\r\n    }\r\n    return {\r\n        status: response.status,\r\n        json\r\n    };\r\n}\r\n/**\r\n * Calls a callable function asynchronously and returns the result.\r\n * @param name The name of the callable trigger.\r\n * @param data The data to pass as params to the function.s\r\n */\r\nasync function call(functionsInstance, name, data, options) {\r\n    const url = functionsInstance._url(name);\r\n    // Encode any special types, such as dates, in the input data.\r\n    data = encode(data);\r\n    const body = { data };\r\n    // Add a header for the authToken.\r\n    const headers = {};\r\n    const context = await functionsInstance.contextProvider.getContext();\r\n    if (context.authToken) {\r\n        headers['Authorization'] = 'Bearer ' + context.authToken;\r\n    }\r\n    if (context.messagingToken) {\r\n        headers['Firebase-Instance-ID-Token'] = context.messagingToken;\r\n    }\r\n    if (context.appCheckToken !== null) {\r\n        headers['X-Firebase-AppCheck'] = context.appCheckToken;\r\n    }\r\n    // Default timeout to 70s, but let the options override it.\r\n    const timeout = options.timeout || 70000;\r\n    const response = await Promise.race([\r\n        postJSON(url, body, headers, functionsInstance.fetchImpl),\r\n        failAfter(timeout),\r\n        functionsInstance.cancelAllRequests\r\n    ]);\r\n    // If service was deleted, interrupted response throws an error.\r\n    if (!response) {\r\n        throw new FunctionsError('cancelled', 'Firebase Functions instance was deleted.');\r\n    }\r\n    // Check for an error status, regardless of http status.\r\n    const error = _errorForResponse(response.status, response.json);\r\n    if (error) {\r\n        throw error;\r\n    }\r\n    if (!response.json) {\r\n        throw new FunctionsError('internal', 'Response is not valid JSON object.');\r\n    }\r\n    let responseData = response.json.data;\r\n    // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\r\n    // backwards compatibility.\r\n    if (typeof responseData === 'undefined') {\r\n        responseData = response.json.result;\r\n    }\r\n    if (typeof responseData === 'undefined') {\r\n        // Consider the response malformed.\r\n        throw new FunctionsError('internal', 'Response is missing data field.');\r\n    }\r\n    // Decode any special types, such as dates, in the returned data.\r\n    const decodedData = decode(responseData);\r\n    return { data: decodedData };\r\n}\n\nconst name = \"@firebase/functions\";\nconst version = \"0.7.3\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst AUTH_INTERNAL_NAME = 'auth-internal';\r\nconst APP_CHECK_INTERNAL_NAME = 'app-check-internal';\r\nconst MESSAGING_INTERNAL_NAME = 'messaging-internal';\r\nfunction registerFunctions(fetchImpl, variant) {\r\n    const factory = (container, { instanceIdentifier: regionOrCustomDomain }) => {\r\n        // Dependencies\r\n        const app = container.getProvider('app').getImmediate();\r\n        const authProvider = container.getProvider(AUTH_INTERNAL_NAME);\r\n        const messagingProvider = container.getProvider(MESSAGING_INTERNAL_NAME);\r\n        const appCheckProvider = container.getProvider(APP_CHECK_INTERNAL_NAME);\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return new FunctionsService(app, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain, fetchImpl);\r\n    };\r\n    _registerComponent(new Component(FUNCTIONS_TYPE, factory, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a {@link Functions} instance for the given app.\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n * @param regionOrCustomDomain - one of:\r\n *   a) The region the callable functions are located in (ex: us-central1)\r\n *   b) A custom domain hosting the callable functions (ex: https://mydomain.com)\r\n * @public\r\n */\r\nfunction getFunctions(app = getApp(), regionOrCustomDomain = DEFAULT_REGION) {\r\n    // Dependencies\r\n    const functionsProvider = _getProvider(getModularInstance(app), FUNCTIONS_TYPE);\r\n    const functionsInstance = functionsProvider.getImmediate({\r\n        identifier: regionOrCustomDomain\r\n    });\r\n    return functionsInstance;\r\n}\r\n/**\r\n * Modify this instance to communicate with the Cloud Functions emulator.\r\n *\r\n * Note: this must be called before this instance has been used to do any operations.\r\n *\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @public\r\n */\r\nfunction connectFunctionsEmulator(functionsInstance, host, port) {\r\n    connectFunctionsEmulator$1(getModularInstance(functionsInstance), host, port);\r\n}\r\n/**\r\n * Returns a reference to the callable HTTPS trigger with the given name.\r\n * @param name - The name of the trigger.\r\n * @public\r\n */\r\nfunction httpsCallable(functionsInstance, name, options) {\r\n    return httpsCallable$1(getModularInstance(functionsInstance), name, options);\r\n}\n\n/**\r\n * Cloud Functions for Firebase\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterFunctions(fetch.bind(self));\n\nexport { connectFunctionsEmulator, getFunctions, httpsCallable };\n"]},"metadata":{},"sourceType":"module"}