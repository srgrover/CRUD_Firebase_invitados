{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, NgZone, Injector } from '@angular/core';\nimport { ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { AuthInstances } from '@angular/fire/auth';\nimport { registerVersion } from 'firebase/app';\nimport { AppCheckInstances } from '@angular/fire/app-check';\nimport { httpsCallable as httpsCallable$1 } from 'rxfire/functions';\nimport { connectFunctionsEmulator as connectFunctionsEmulator$1, getFunctions as getFunctions$1, httpsCallable as httpsCallable$2 } from 'firebase/functions';\nexport * from 'firebase/functions';\n\nclass Functions {\n  constructor(functions) {\n    return functions;\n  }\n\n}\n\nconst FUNCTIONS_PROVIDER_NAME = 'functions';\n\nclass FunctionsInstances {\n  constructor() {\n    return ɵgetAllInstancesOf(FUNCTIONS_PROVIDER_NAME);\n  }\n\n}\n\nconst functionInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(FUNCTIONS_PROVIDER_NAME))), distinct());\nconst PROVIDED_FUNCTIONS_INSTANCES = new InjectionToken('angularfire2.functions-instances');\n\nfunction defaultFunctionsInstanceFactory(provided, defaultApp) {\n  const defaultAuth = ɵgetDefaultInstanceOf(FUNCTIONS_PROVIDER_NAME, provided, defaultApp);\n  return defaultAuth && new Functions(defaultAuth);\n}\n\nfunction functionsInstanceFactory(fn) {\n  return (zone, injector) => {\n    const functions = zone.runOutsideAngular(() => fn(injector));\n    return new Functions(functions);\n  };\n}\n\nconst FUNCTIONS_INSTANCES_PROVIDER = {\n  provide: FunctionsInstances,\n  deps: [[new Optional(), PROVIDED_FUNCTIONS_INSTANCES]]\n};\nconst DEFAULT_FUNCTIONS_INSTANCE_PROVIDER = {\n  provide: Functions,\n  useFactory: defaultFunctionsInstanceFactory,\n  deps: [[new Optional(), PROVIDED_FUNCTIONS_INSTANCES], FirebaseApp]\n};\n\nclass FunctionsModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'fn');\n  }\n\n}\n\nFunctionsModule.ɵfac = function FunctionsModule_Factory(t) {\n  return new (t || FunctionsModule)();\n};\n\nFunctionsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: FunctionsModule\n});\nFunctionsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [DEFAULT_FUNCTIONS_INSTANCE_PROVIDER, FUNCTIONS_INSTANCES_PROVIDER]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FunctionsModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_FUNCTIONS_INSTANCE_PROVIDER, FUNCTIONS_INSTANCES_PROVIDER]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nfunction provideFunctions(fn, ...deps) {\n  return {\n    ngModule: FunctionsModule,\n    providers: [{\n      provide: PROVIDED_FUNCTIONS_INSTANCES,\n      useFactory: functionsInstanceFactory(fn),\n      multi: true,\n      deps: [NgZone, Injector, ɵAngularFireSchedulers, FirebaseApps, // Defensively load Auth first, if provided\n      [new Optional(), AuthInstances], [new Optional(), AppCheckInstances], ...deps]\n    }]\n  };\n} // DO NOT MODIFY, this file is autogenerated by tools/build.ts\n\n\nconst httpsCallableData = ɵzoneWrap(httpsCallable$1, true); // DO NOT MODIFY, this file is autogenerated by tools/build.ts\n\nconst connectFunctionsEmulator = ɵzoneWrap(connectFunctionsEmulator$1, true);\nconst getFunctions = ɵzoneWrap(getFunctions$1, true);\nconst httpsCallable = ɵzoneWrap(httpsCallable$2, true);\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Functions, FunctionsInstances, FunctionsModule, connectFunctionsEmulator, functionInstance$, getFunctions, httpsCallable, httpsCallableData, provideFunctions };","map":{"version":3,"sources":["C:/Users/romerosp/source/repos/Angular/CRUD_Firebase_invitados/node_modules/@angular/fire/fesm2015/angular-fire-functions.js"],"names":["i0","InjectionToken","Optional","NgModule","NgZone","Injector","ɵgetAllInstancesOf","ɵgetDefaultInstanceOf","VERSION","ɵAngularFireSchedulers","ɵzoneWrap","timer","from","concatMap","distinct","FirebaseApp","FirebaseApps","AuthInstances","registerVersion","AppCheckInstances","httpsCallable","httpsCallable$1","connectFunctionsEmulator","connectFunctionsEmulator$1","getFunctions","getFunctions$1","httpsCallable$2","Functions","constructor","functions","FUNCTIONS_PROVIDER_NAME","FunctionsInstances","functionInstance$","pipe","PROVIDED_FUNCTIONS_INSTANCES","defaultFunctionsInstanceFactory","provided","defaultApp","defaultAuth","functionsInstanceFactory","fn","zone","injector","runOutsideAngular","FUNCTIONS_INSTANCES_PROVIDER","provide","deps","DEFAULT_FUNCTIONS_INSTANCE_PROVIDER","useFactory","FunctionsModule","full","ɵfac","ɵmod","ɵinj","type","args","providers","provideFunctions","ngModule","multi","httpsCallableData"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, NgZone, Injector } from '@angular/core';\nimport { ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { AuthInstances } from '@angular/fire/auth';\nimport { registerVersion } from 'firebase/app';\nimport { AppCheckInstances } from '@angular/fire/app-check';\nimport { httpsCallable as httpsCallable$1 } from 'rxfire/functions';\nimport { connectFunctionsEmulator as connectFunctionsEmulator$1, getFunctions as getFunctions$1, httpsCallable as httpsCallable$2 } from 'firebase/functions';\nexport * from 'firebase/functions';\n\nclass Functions {\n    constructor(functions) {\n        return functions;\n    }\n}\nconst FUNCTIONS_PROVIDER_NAME = 'functions';\nclass FunctionsInstances {\n    constructor() {\n        return ɵgetAllInstancesOf(FUNCTIONS_PROVIDER_NAME);\n    }\n}\nconst functionInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(FUNCTIONS_PROVIDER_NAME))), distinct());\n\nconst PROVIDED_FUNCTIONS_INSTANCES = new InjectionToken('angularfire2.functions-instances');\nfunction defaultFunctionsInstanceFactory(provided, defaultApp) {\n    const defaultAuth = ɵgetDefaultInstanceOf(FUNCTIONS_PROVIDER_NAME, provided, defaultApp);\n    return defaultAuth && new Functions(defaultAuth);\n}\nfunction functionsInstanceFactory(fn) {\n    return (zone, injector) => {\n        const functions = zone.runOutsideAngular(() => fn(injector));\n        return new Functions(functions);\n    };\n}\nconst FUNCTIONS_INSTANCES_PROVIDER = {\n    provide: FunctionsInstances,\n    deps: [\n        [new Optional(), PROVIDED_FUNCTIONS_INSTANCES],\n    ]\n};\nconst DEFAULT_FUNCTIONS_INSTANCE_PROVIDER = {\n    provide: Functions,\n    useFactory: defaultFunctionsInstanceFactory,\n    deps: [\n        [new Optional(), PROVIDED_FUNCTIONS_INSTANCES],\n        FirebaseApp,\n    ]\n};\nclass FunctionsModule {\n    constructor() {\n        registerVersion('angularfire', VERSION.full, 'fn');\n    }\n}\nFunctionsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: FunctionsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nFunctionsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: FunctionsModule });\nFunctionsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: FunctionsModule, providers: [\n        DEFAULT_FUNCTIONS_INSTANCE_PROVIDER,\n        FUNCTIONS_INSTANCES_PROVIDER,\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: FunctionsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        DEFAULT_FUNCTIONS_INSTANCE_PROVIDER,\n                        FUNCTIONS_INSTANCES_PROVIDER,\n                    ]\n                }]\n        }], ctorParameters: function () { return []; } });\nfunction provideFunctions(fn, ...deps) {\n    return {\n        ngModule: FunctionsModule,\n        providers: [{\n                provide: PROVIDED_FUNCTIONS_INSTANCES,\n                useFactory: functionsInstanceFactory(fn),\n                multi: true,\n                deps: [\n                    NgZone,\n                    Injector,\n                    ɵAngularFireSchedulers,\n                    FirebaseApps,\n                    // Defensively load Auth first, if provided\n                    [new Optional(), AuthInstances],\n                    [new Optional(), AppCheckInstances],\n                    ...deps,\n                ]\n            }]\n    };\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst httpsCallableData = ɵzoneWrap(httpsCallable$1, true);\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst connectFunctionsEmulator = ɵzoneWrap(connectFunctionsEmulator$1, true);\nconst getFunctions = ɵzoneWrap(getFunctions$1, true);\nconst httpsCallable = ɵzoneWrap(httpsCallable$2, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Functions, FunctionsInstances, FunctionsModule, connectFunctionsEmulator, functionInstance$, getFunctions, httpsCallable, httpsCallableData, provideFunctions };\n"]},"metadata":{},"sourceType":"module"}